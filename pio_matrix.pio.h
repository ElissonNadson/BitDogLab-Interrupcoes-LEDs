// --------------------------------------------------
// This file is autogenerated by pioasm; do not edit!
// --------------------------------------------------

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// pio_matrix.pio
// ------ //

#define pio_matrix_wrap_target 0
#define pio_matrix_wrap 5

static const uint16_t pio_matrix_program_instructions[] = {
    0x8001, //  0: OUT    X, 1
    0x0043, //  1: JMP    !X, 3
    0x0000, //  2: JMP    0
    0xa081, //  3: SET    PINS, 1 [4]
    0x0000, //  4: NOP    [4]
    0xa000, //  5: SET    PINS, 0 [1]
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_matrix_program = {
    .instructions = pio_matrix_program_instructions,
    .length = 6,
    .origin = -1,
};

static inline pio_sm_config pio_matrix_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_matrix_wrap_target, offset + pio_matrix_wrap);
    sm_config_set_out_shift(&c, true, true, 8);
    sm_config_set_set_pins(&c, 0, 1);
    return c;
}

static inline void pio_matrix_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_config c = pio_matrix_program_get_default_config(offset);
    sm_config_set_set_pins(&c, pin, 1);
    float div = clock_get_hz(clk_sys) / 8000000.0;
    sm_config_set_clkdiv(&c, div);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_out_shift(&c, false, true, 24);
    sm_config_set_out_special(&c, true, false, false);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
#endif
